def label = "worker-${UUID.randomUUID().toString()}"

// Slack 알림

podTemplate(label: label, containers: [
	
	containerTemplate(name: 'npm', image: 'node:lts', command: 'cat', ttyEnabled: true),   //containerTemplate(name: 'gradle', image: 'gradle:4.5.1-jdk8', command: 'cat', ttyEnabled: true),   //containerTemplate(name: 'maven', image: 'maven:3.3.9-jdk-8-alpine', ttyEnabled: true, command: 'cat'),   containerTemplate(name: "scanner", image: "newtmitch/sonar-scanner", ttyEnabled: true, command: "cat"),   containerTemplate(name: 'docker', image: 'docker:dind', command: 'dockerd -host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay', ttyEnabled: true, alwaysPullImage: true, privileged: true),   containerTemplate(name: 'kubectl', image: 'roffe/kubectl', command: 'cat', ttyEnabled: true) 
	
// #0 필요한 Pod생성
]) {
  node(label) {

	// 예외처리 구문
	try {
		// Slack - 빌드 시작시

		// #1 Github 소스 가져오기
		
		stage('Get Source') {     git credentialsId: '{github-lab05}', url: '{https://github.com/sangick/cicd-front/}', branch: 'master' } 

		// #2 Properties 파일 읽기		

		// 재배포를 위한 tag를 재정의
		def timeStamp = System.currentTimeMillis()
		echo "TimeStamp: ${timeStamp}"
		tag = tag+"-"+timeStamp

		// #3 빌드 Stage

		// #4 Sonarqube 정적분석 Stage

		// #5 컨테이너 이미지 생성 Stage

		// #6 배포 Stage


		// Slack - 빌드 성공시


	} catch(e) {
		// Slack - 빌드 실패시

	}
  }
}
